<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
	"http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-type" content="text/html; charset=utf-8">
		<title>DOMBuilder Examples</title>
	</head>

	<body>

		<p>View source to see how the HTML below is being generated. (Check out <a href="http://github.com/skyzyx/dombuilder">DOMBuilder on GitHub</a> for the up-to-date source.)</p>
		<hr>

		<script src="dombuilder.js" type="text/javascript" charset="utf-8"></script>
		<script type="text/javascript" charset="utf-8">
		(function() {

			// Define a shortcut. Let's pick underscore. It can be anything, really. Or nothing. Whatever.
			var _ = DOMBuilder;


			/*
			<div id="test" class="sample">
				<p>This is a <a href="">sample of the code</a> that you may like.</p>
				<p>And another <a href="#"><strong>complex-ish</strong></a> one.</p>
				<ul class="sample">
					<li><a href="http://google.com">One</a></li>
					<li><em>Two</em></li>
					<li><strong>Three</strong></li>
				</ul>
			</div>
			*/
			document.body.appendChild(
				_('div', { 'id':'test', 'class':'sample' }).child([

					// Straight HTML via html
					_('p').html('This is a <a href="">sample of the code</a> that you may like.'),

					// Similar, but using DOM
					_('p').html('And another ').child(
						_('a', { 'href':'#' }).child(
							_('strong').html('complex').html('-ish')
						)
					).html(' one.'),

					// Let's make a short list
					_('ul').child([
						_('li').child(
							_('a', { 'href':'http://google.com' }).html('One')
						),
						_('li').child(
							_('em').html('Two')
						),
						_('li').child(
							_('strong').html('Three')
						)
					])
				]).asDOM()
			);


			/*
			<div>
				<p>Adding similar nodes with a for loop.</p>
				<ul id="list">
					<li><a href="#one">one</a></li>
					<li><a href="#two">two</a></li>
					<li><a href="#three">three</a></li>
					<li><a href="#four">four</a></li>
					<li><a href="#five">five</a></li>
				</ul>
			</div>
			*/
			document.body.appendChild(function() {

				// Define some variables
				var div, ul, numbers = ['one', 'two', 'three', 'four', 'five'];

				// Generate a DIV with multiple child nodes, while storing a reference to the child UL
				div = _('div').child([
					_('p').html('Adding similar nodes with a for loop.'),
					ul = _('ul', { 'id':'list' })
				]);

				// Loop and add children to the UL
				for (var i = 0, max = numbers.length; i < max; i++) {
					ul.child(
						_('li').child(
							_('a', { 'href':'#' + numbers[i] }).html(numbers[i])
						)
					);
				}

				// Return the pre-constructed DOM nodes
				return div.asDOM();
			}());


			/*
			<p>A table, generated programmatically with anonymous callbacks and closures, from data.</p>
			<table width="20%" border="1">
				<thead>
					<tr>
						<th>col-1</th>
						<th>col-2</th>
						<th>col-3</th>
						<th>col-4</th>
						<th>col-5</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>cell-1</td>
						<td>cell-2</td>
						<td>cell-3</td>
						<td>cell-4</td>
						<td>cell-5</td>
					</tr>
					<tr>
						<td>cell-6</td>
						<td>cell-7</td>
						<td>cell-8</td>
						<td>cell-9</td>
						<td>cell-10</td>
					</tr>
					<tr>
						<td>cell-11</td>
						<td>cell-12</td>
						<td></td>
						<td></td>
						<td></td>
					</tr>
				</tbody>
			</table>
			*/
			document.body.appendChild(_('p').html('A table, generated programmatically with anonymous callbacks and closures, from data.').asDOM());
			document.body.appendChild(function() {

				// Declare variables, and provide data to generate a table with.
				var cols = ['col-1', 'col-2', 'col-3', 'col-4', 'col-5'],
					cells = ['cell-1', 'cell-2', 'cell-3', 'cell-4', 'cell-5', 'cell-6', 'cell-7', 'cell-8', 'cell-9', 'cell-10', 'cell-11', 'cell-12'],
					table;

				// Return the entire generated <table>
				return _('table', {
					'width':'20%',
					'border':'1'
				}).child([

					// <thead> section
					_('thead').child(

						// <tr> node
						_('tr').child(function() {

							// Loop and collect the <th> tags.
							var th = [];
							for (var i = 0, max = cols.length; i < max; i++) {
								th.push(_('th').html(cols[i]));
							}

							// Return from the anonymous function
							return th;
						}())
					),

					// <tbody> section
					_('tbody').child(function() {

						// Loop through the cells, breaking them into chunks that fit the table columns
						var tr = [];
						for (var i = 0, max = Math.ceil(cells.length / cols.length); i < max; i++) {

							// Add new <tr> tags for each row
							tr.push(_('tr').child(function() {

								// Loop through the individual cells, split into columns
								var td = [];
								for (var j = i * cols.length, jmax = (i + 1) * cols.length; j < jmax; j++) {

									// Add the <td> tags with the cell data
									td.push(_('td').html(cells[j] || ' '));
								}

								// Return from the anonymous function
								return td;
							}()));
						}

						// Return from the anonymous function
						return tr;
					}())

				// Call asDOM() to return the real DOM nodes.
				]).asDOM();
			}());

		})();
		</script>
	</body>
</html>