h1. DOMBuilder

* Copyright (c) Ryan Parman <http://ryanparman.com/labs/>
* BSD Licensed <http://creativecommons.org/licenses/BSD/>

h1. Usage

h3. Here's the HTML we want to generate:

<pre><div class="location_select_control">
	<a href="" class="location_select_label">
		<label>This is my label</label>
	</a>
</div></pre>

h3. Here is how we'd do it with the standard DOM:

<pre>control_div = document.createElement('div');
control_div.className = "location_select_control";
control_link = document.createElement('a');
control_link.href = "";
control_link.className = "location_select_label";
control_label = document.createElement('label');
control_label.innerHTML = "This is my label";
control_link.appendChild(control_label);
control_div.appendChild(control_link);
document.body.appendChild(control_div);</pre>

h3. Lastly, here's how we'd do it with DOMBuilder:

<pre>document.body.appendChild(new DOMBuilder('div', { class:'location_select_control' }).child(
	new DOMBuilder('a', { href:'', class:'location_select_label' }).child(
		new DOMBuilder('label').innerHTML('This is my label')
	)
).html());</pre>

h1. API

I wanted to make DOMBuilder as chainable as possible. All methods return <code>this</code> except for the <code>html()</code> method.

h2. DOMBuilder(elem, attr) - _Constructor_

DOMBuilder generates DOM nodes with an object-oriented syntax.

h3. Parameters

* <code>elem</code> - {String} (Required) The name of the element to generate.
* <code>attr</code> - {Hash} (Optional) A JSON Hash of the attributes to apply to the element.

h3. Returns

* {DOMBuilder} - A DOMBuilder object.

h2. child(obj) - _Method_

Append one or more child nodes.

h3. Parameters

* <code>obj</code> - {HTMLElement | DOMBuilder | Array} (Required) A DOM element, a DOMBuilder object, or an array of these for multiple children.

h3. Returns

* {DOMBuilder} - The original DOMBuilder object.

